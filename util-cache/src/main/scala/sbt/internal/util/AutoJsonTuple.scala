/*
 * sbt
 * Copyright 2011 - 2018, Lightbend, Inc.
 * Copyright 2008 - 2010, Mark Harrah
 * Licensed under Apache License 2.0 (see LICENSE)
 */

// This file is autogenerated. Do not edit manually (see project/AutoJsonTuple.scala).
// format: off
package sbt.internal.util

trait AutoJsonTuple {
  implicit def tuple1[T1](implicit ev1: AutoJson[T1]) = new AutoJson[Tuple1[T1]] {
    override def read(unbuilder: JsonUnbuilder): Tuple1[T1] = unbuilder.readSeq { (u, len) =>
      Tuple1(ev1.read(u))
    }
    override def write(a: Tuple1[T1], builder: JsonBuilder): Unit = {
      builder.writeInt(1)
      ev1.write(a._1, builder)
    }
  }

  implicit def tuple2[T1, T2](implicit ev1: AutoJson[T1], ev2: AutoJson[T2]) = new AutoJson[Tuple2[T1, T2]] {
    override def read(unbuilder: JsonUnbuilder): Tuple2[T1, T2] = unbuilder.readSeq { (u, len) =>
      Tuple2(ev1.read(u), ev2.read(u))
    }
    override def write(a: Tuple2[T1, T2], builder: JsonBuilder): Unit = {
      builder.writeInt(2)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
    }
  }

  implicit def tuple3[T1, T2, T3](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3]) = new AutoJson[Tuple3[T1, T2, T3]] {
    override def read(unbuilder: JsonUnbuilder): Tuple3[T1, T2, T3] = unbuilder.readSeq { (u, len) =>
      Tuple3(ev1.read(u), ev2.read(u), ev3.read(u))
    }
    override def write(a: Tuple3[T1, T2, T3], builder: JsonBuilder): Unit = {
      builder.writeInt(3)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
    }
  }

  implicit def tuple4[T1, T2, T3, T4](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4]) = new AutoJson[Tuple4[T1, T2, T3, T4]] {
    override def read(unbuilder: JsonUnbuilder): Tuple4[T1, T2, T3, T4] = unbuilder.readSeq { (u, len) =>
      Tuple4(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u))
    }
    override def write(a: Tuple4[T1, T2, T3, T4], builder: JsonBuilder): Unit = {
      builder.writeInt(4)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
    }
  }

  implicit def tuple5[T1, T2, T3, T4, T5](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5]) = new AutoJson[Tuple5[T1, T2, T3, T4, T5]] {
    override def read(unbuilder: JsonUnbuilder): Tuple5[T1, T2, T3, T4, T5] = unbuilder.readSeq { (u, len) =>
      Tuple5(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u))
    }
    override def write(a: Tuple5[T1, T2, T3, T4, T5], builder: JsonBuilder): Unit = {
      builder.writeInt(5)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
    }
  }

  implicit def tuple6[T1, T2, T3, T4, T5, T6](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6]) = new AutoJson[Tuple6[T1, T2, T3, T4, T5, T6]] {
    override def read(unbuilder: JsonUnbuilder): Tuple6[T1, T2, T3, T4, T5, T6] = unbuilder.readSeq { (u, len) =>
      Tuple6(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u))
    }
    override def write(a: Tuple6[T1, T2, T3, T4, T5, T6], builder: JsonBuilder): Unit = {
      builder.writeInt(6)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
    }
  }

  implicit def tuple7[T1, T2, T3, T4, T5, T6, T7](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7]) = new AutoJson[Tuple7[T1, T2, T3, T4, T5, T6, T7]] {
    override def read(unbuilder: JsonUnbuilder): Tuple7[T1, T2, T3, T4, T5, T6, T7] = unbuilder.readSeq { (u, len) =>
      Tuple7(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u))
    }
    override def write(a: Tuple7[T1, T2, T3, T4, T5, T6, T7], builder: JsonBuilder): Unit = {
      builder.writeInt(7)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
    }
  }

  implicit def tuple8[T1, T2, T3, T4, T5, T6, T7, T8](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8]) = new AutoJson[Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]] {
    override def read(unbuilder: JsonUnbuilder): Tuple8[T1, T2, T3, T4, T5, T6, T7, T8] = unbuilder.readSeq { (u, len) =>
      Tuple8(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u))
    }
    override def write(a: Tuple8[T1, T2, T3, T4, T5, T6, T7, T8], builder: JsonBuilder): Unit = {
      builder.writeInt(8)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
    }
  }

  implicit def tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9]) = new AutoJson[Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]] {
    override def read(unbuilder: JsonUnbuilder): Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9] = unbuilder.readSeq { (u, len) =>
      Tuple9(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u))
    }
    override def write(a: Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9], builder: JsonBuilder): Unit = {
      builder.writeInt(9)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
    }
  }

  implicit def tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10]) = new AutoJson[Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]] {
    override def read(unbuilder: JsonUnbuilder): Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10] = unbuilder.readSeq { (u, len) =>
      Tuple10(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u))
    }
    override def write(a: Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10], builder: JsonBuilder): Unit = {
      builder.writeInt(10)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
    }
  }

  implicit def tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11]) = new AutoJson[Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]] {
    override def read(unbuilder: JsonUnbuilder): Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11] = unbuilder.readSeq { (u, len) =>
      Tuple11(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u))
    }
    override def write(a: Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11], builder: JsonBuilder): Unit = {
      builder.writeInt(11)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
    }
  }

  implicit def tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12]) = new AutoJson[Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]] {
    override def read(unbuilder: JsonUnbuilder): Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12] = unbuilder.readSeq { (u, len) =>
      Tuple12(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u))
    }
    override def write(a: Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12], builder: JsonBuilder): Unit = {
      builder.writeInt(12)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
    }
  }

  implicit def tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13]) = new AutoJson[Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]] {
    override def read(unbuilder: JsonUnbuilder): Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13] = unbuilder.readSeq { (u, len) =>
      Tuple13(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u))
    }
    override def write(a: Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13], builder: JsonBuilder): Unit = {
      builder.writeInt(13)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
    }
  }

  implicit def tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14]) = new AutoJson[Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]] {
    override def read(unbuilder: JsonUnbuilder): Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14] = unbuilder.readSeq { (u, len) =>
      Tuple14(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u))
    }
    override def write(a: Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14], builder: JsonBuilder): Unit = {
      builder.writeInt(14)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
    }
  }

  implicit def tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14], ev15: AutoJson[T15]) = new AutoJson[Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]] {
    override def read(unbuilder: JsonUnbuilder): Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15] = unbuilder.readSeq { (u, len) =>
      Tuple15(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u), ev15.read(u))
    }
    override def write(a: Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15], builder: JsonBuilder): Unit = {
      builder.writeInt(15)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
      ev15.write(a._15, builder)
    }
  }

  implicit def tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14], ev15: AutoJson[T15], ev16: AutoJson[T16]) = new AutoJson[Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]] {
    override def read(unbuilder: JsonUnbuilder): Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16] = unbuilder.readSeq { (u, len) =>
      Tuple16(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u), ev15.read(u), ev16.read(u))
    }
    override def write(a: Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16], builder: JsonBuilder): Unit = {
      builder.writeInt(16)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
      ev15.write(a._15, builder)
      ev16.write(a._16, builder)
    }
  }

  implicit def tuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14], ev15: AutoJson[T15], ev16: AutoJson[T16], ev17: AutoJson[T17]) = new AutoJson[Tuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17]] {
    override def read(unbuilder: JsonUnbuilder): Tuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17] = unbuilder.readSeq { (u, len) =>
      Tuple17(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u), ev15.read(u), ev16.read(u), ev17.read(u))
    }
    override def write(a: Tuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17], builder: JsonBuilder): Unit = {
      builder.writeInt(17)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
      ev15.write(a._15, builder)
      ev16.write(a._16, builder)
      ev17.write(a._17, builder)
    }
  }

  implicit def tuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14], ev15: AutoJson[T15], ev16: AutoJson[T16], ev17: AutoJson[T17], ev18: AutoJson[T18]) = new AutoJson[Tuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18]] {
    override def read(unbuilder: JsonUnbuilder): Tuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18] = unbuilder.readSeq { (u, len) =>
      Tuple18(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u), ev15.read(u), ev16.read(u), ev17.read(u), ev18.read(u))
    }
    override def write(a: Tuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18], builder: JsonBuilder): Unit = {
      builder.writeInt(18)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
      ev15.write(a._15, builder)
      ev16.write(a._16, builder)
      ev17.write(a._17, builder)
      ev18.write(a._18, builder)
    }
  }

  implicit def tuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14], ev15: AutoJson[T15], ev16: AutoJson[T16], ev17: AutoJson[T17], ev18: AutoJson[T18], ev19: AutoJson[T19]) = new AutoJson[Tuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19]] {
    override def read(unbuilder: JsonUnbuilder): Tuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19] = unbuilder.readSeq { (u, len) =>
      Tuple19(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u), ev15.read(u), ev16.read(u), ev17.read(u), ev18.read(u), ev19.read(u))
    }
    override def write(a: Tuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19], builder: JsonBuilder): Unit = {
      builder.writeInt(19)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
      ev15.write(a._15, builder)
      ev16.write(a._16, builder)
      ev17.write(a._17, builder)
      ev18.write(a._18, builder)
      ev19.write(a._19, builder)
    }
  }

  implicit def tuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14], ev15: AutoJson[T15], ev16: AutoJson[T16], ev17: AutoJson[T17], ev18: AutoJson[T18], ev19: AutoJson[T19], ev20: AutoJson[T20]) = new AutoJson[Tuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20]] {
    override def read(unbuilder: JsonUnbuilder): Tuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20] = unbuilder.readSeq { (u, len) =>
      Tuple20(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u), ev15.read(u), ev16.read(u), ev17.read(u), ev18.read(u), ev19.read(u), ev20.read(u))
    }
    override def write(a: Tuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20], builder: JsonBuilder): Unit = {
      builder.writeInt(20)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
      ev15.write(a._15, builder)
      ev16.write(a._16, builder)
      ev17.write(a._17, builder)
      ev18.write(a._18, builder)
      ev19.write(a._19, builder)
      ev20.write(a._20, builder)
    }
  }

  implicit def tuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14], ev15: AutoJson[T15], ev16: AutoJson[T16], ev17: AutoJson[T17], ev18: AutoJson[T18], ev19: AutoJson[T19], ev20: AutoJson[T20], ev21: AutoJson[T21]) = new AutoJson[Tuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21]] {
    override def read(unbuilder: JsonUnbuilder): Tuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21] = unbuilder.readSeq { (u, len) =>
      Tuple21(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u), ev15.read(u), ev16.read(u), ev17.read(u), ev18.read(u), ev19.read(u), ev20.read(u), ev21.read(u))
    }
    override def write(a: Tuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21], builder: JsonBuilder): Unit = {
      builder.writeInt(21)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
      ev15.write(a._15, builder)
      ev16.write(a._16, builder)
      ev17.write(a._17, builder)
      ev18.write(a._18, builder)
      ev19.write(a._19, builder)
      ev20.write(a._20, builder)
      ev21.write(a._21, builder)
    }
  }

  implicit def tuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22](implicit ev1: AutoJson[T1], ev2: AutoJson[T2], ev3: AutoJson[T3], ev4: AutoJson[T4], ev5: AutoJson[T5], ev6: AutoJson[T6], ev7: AutoJson[T7], ev8: AutoJson[T8], ev9: AutoJson[T9], ev10: AutoJson[T10], ev11: AutoJson[T11], ev12: AutoJson[T12], ev13: AutoJson[T13], ev14: AutoJson[T14], ev15: AutoJson[T15], ev16: AutoJson[T16], ev17: AutoJson[T17], ev18: AutoJson[T18], ev19: AutoJson[T19], ev20: AutoJson[T20], ev21: AutoJson[T21], ev22: AutoJson[T22]) = new AutoJson[Tuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22]] {
    override def read(unbuilder: JsonUnbuilder): Tuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22] = unbuilder.readSeq { (u, len) =>
      Tuple22(ev1.read(u), ev2.read(u), ev3.read(u), ev4.read(u), ev5.read(u), ev6.read(u), ev7.read(u), ev8.read(u), ev9.read(u), ev10.read(u), ev11.read(u), ev12.read(u), ev13.read(u), ev14.read(u), ev15.read(u), ev16.read(u), ev17.read(u), ev18.read(u), ev19.read(u), ev20.read(u), ev21.read(u), ev22.read(u))
    }
    override def write(a: Tuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22], builder: JsonBuilder): Unit = {
      builder.writeInt(22)
      ev1.write(a._1, builder)
      ev2.write(a._2, builder)
      ev3.write(a._3, builder)
      ev4.write(a._4, builder)
      ev5.write(a._5, builder)
      ev6.write(a._6, builder)
      ev7.write(a._7, builder)
      ev8.write(a._8, builder)
      ev9.write(a._9, builder)
      ev10.write(a._10, builder)
      ev11.write(a._11, builder)
      ev12.write(a._12, builder)
      ev13.write(a._13, builder)
      ev14.write(a._14, builder)
      ev15.write(a._15, builder)
      ev16.write(a._16, builder)
      ev17.write(a._17, builder)
      ev18.write(a._18, builder)
      ev19.write(a._19, builder)
      ev20.write(a._20, builder)
      ev21.write(a._21, builder)
      ev22.write(a._22, builder)
    }
  }
}