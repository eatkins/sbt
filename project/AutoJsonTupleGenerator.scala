import java.nio.file.{ Files, Path }
import java.io.IOException

object AutoJsonTupleGenerator {
  def write(path: Path, header: String): Seq[java.io.File] = {
    val existing = try new String(Files.readAllBytes(path), "UTF-8")
    catch { case _: IOException => "" }
    val methods = (1 to 22).map { i =>
      val params = (1 to i).map(j => s"T$j").toVector
      val types = params.mkString(", ")
      val ev = params.zipWithIndex.map { case (_, i)   => s"ev${i + 1}" }
      val evParams = ev.zip(params).map { case (ev, p) => s"$ev: AutoJson[$p]" }
      val writers =
        ev.zipWithIndex
          .map { case (e, i) => s"$e.write(a._${i + 1}, builder)" }
          .mkString("\n|      ")
      s"""
      |  implicit def tuple$i[$types](implicit ${evParams.mkString(", ")}) = new AutoJson[Tuple$i[$types]] {
      |    override def read(unbuilder: JsonUnbuilder): Tuple$i[$types] = unbuilder.readSeq { (u, len) =>
      |      Tuple$i(${ev.map(e => s"$e.read(u)").mkString(", ")})
      |    }
      |    override def write(a: Tuple$i[$types], builder: JsonBuilder): Unit = {
      |      builder.writeInt($i)
      |      $writers
      |    }
      |  }""".linesIterator.filterNot(_.trim.isEmpty).mkString("\n")
    }
    val fullHeader = header.linesIterator.mkString("/*\n| * ", "\n| * ", "\n| */\n")
    val newContent = s"""$fullHeader
      |// This file is autogenerated. Do not edit manually (see project/AutoJsonTuple.scala).
      |// format: off
      |package sbt.internal.util
      |
      |trait AutoJsonTuple {
      ${methods.mkString("  ", "\n\n  ", "")}
      |}""".stripMargin
    if (existing != newContent) Files.write(path, newContent.getBytes("UTF-8"))
    Nil
  }
}
